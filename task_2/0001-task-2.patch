From 2677f27e03c893c1cc9485f4bb39be05437fc9f8 Mon Sep 17 00:00:00 2001
From: azlan <azlanamalik@hotmail.com>
Date: Sat, 31 Aug 2024 15:28:14 +0100
Subject: [PATCH] task 2

---
 src/App.tsx   | 32 ++++++++++++++++++++++++++------
 src/Graph.tsx | 14 +++++++++++---
 2 files changed, 37 insertions(+), 9 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..f6e6119 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: Boolean
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,19 +31,37 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if(this.state.showGraph){
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;  // Initialize a counter to track the number of intervals
+  
+    // Set up a repeated interval to fetch data every 100 milliseconds
+    const interval = setInterval(() => {
+      // Fetch data from the server using DataStreamer.getData method
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        // Update the component's state with the fetched data
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+  
+      x++;  // Increment the counter after each interval
+  
+      // Clear the interval if the counter exceeds 100
+      if (x > 1000) {
+        clearInterval(interval);  // Stop the interval from running
+      }
+    }, 100);  // Interval duration set to 10 milliseconds
   }
+  
 
   /**
    * Render the App react component
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..292f52a 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -33,7 +33,6 @@ class Graph extends Component<IProps, {}> {
   componentDidMount() {
     // Get element to attach the table from the DOM.
     const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
-
     const schema = {
       stock: 'string',
       top_ask_price: 'float',
@@ -46,7 +45,16 @@ class Graph extends Component<IProps, {}> {
     }
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
-
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates', JSON.stringify({
+        "stock": "distinct count",
+        "top_ask_price": "avg",
+        "top_bid_price": "avg",
+        "timestamp": "distinct count"
+      }));
       // Add more Perspective configurations here.
       elem.load(this.table);
     }
-- 
2.38.0.windows.1

